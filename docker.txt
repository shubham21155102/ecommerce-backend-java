// mysql docker image creation
docker run -p 3307:3306 --name mysqldb -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.2.0
#VM OPTIONS
//app running configruation
-DMYSQL_USER=root -DMYSQL_PASSWORD=123456 -DMYSQL_PORT=3307 
//optional spring boot will create automatically
CREATE TABLE users (
    user_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    name VARCHAR(255),
    email VARCHAR(255),
    campus_id VARCHAR(255) UNIQUE,
    hostel VARCHAR(255),
    phone VARCHAR(255)
);
CREATE TABLE products (
    product_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    product_name VARCHAR(255),
    image VARCHAR(255),
    details VARCHAR(255),
    category VARCHAR(255),
    user_id BIGINT,
    starting_bid INT,
    sold BOOLEAN DEFAULT FALSE,
    FOREIGN KEY (user_id) REFERENCES users(user_id)
);
CREATE TABLE messages (
    message_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    timestamp VARCHAR(255),
    message TEXT,
    sender_id BIGINT,
    receiver_id BIGINT,
    product_id BIGINT,
    FOREIGN KEY (sender_id) REFERENCES users(user_id),
    FOREIGN KEY (receiver_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
CREATE TABLE bids (
    bid_id BIGINT AUTO_INCREMENT PRIMARY KEY,
    user_id BIGINT,
    bid INT,
    product_id BIGINT,
    frozen BOOLEAN,
    FOREIGN KEY (user_id) REFERENCES users(user_id),
    FOREIGN KEY (product_id) REFERENCES products(product_id)
);
//docker network check
docker network 
//docker network create
docker network create spring-run
58d729b93eede649b4514f2812c2faa6d6711b6c887ede9f0e6724b84750a640
//docker network delete
docker network rm spring-run
//error deleteing 
docker network inspect spring-run
// copy container id then delete
docker network disconnect spring-run
7654849e98fb0ce7142982fd4ccfdc4b810ebe7e9faee069bb5084232c246f1d
docker network rm spring-run
//docker image creation current directory where docker file is present
docker build -t spring-bits-backend .
//docker mysql image check
docker ps 
//docker
docker run -p 3307:3306 --name mysqldb -e MYSQL_ROOT_PASSWORD=123456 -d mysql:8.2.0
docker network ls
docker network connect spring-run mysqldb
docker network inspect spring-run
[
    {
        "Name": "spring-run",
        "Id": "58d729b93eede649b4514f2812c2faa6d6711b6c887ede9f0e6724b84750a640",
        "Created": "2023-12-10T04:48:00.821689167Z",
        "Scope": "local",
        "Driver": "bridge",
        "EnableIPv6": false,
        "IPAM": {
            "Driver": "default",
            "Options": {},
            "Config": [
                {
                    "Subnet": "172.21.0.0/16",
                    "Gateway": "172.21.0.1"
                }
            ]
        },
        "Internal": false,
        "Attachable": false,
        "Ingress": false,
        "ConfigFrom": {
            "Network": ""
        },
        "ConfigOnly": false,
        "Containers": {
            "7654849e98fb0ce7142982fd4ccfdc4b810ebe7e9faee069bb5084232c246f1d": {
                "Name": "mysqldb",
                "EndpointID": "4c5f29ef1fd73f422a4274722606f03fda2b0d6187771605de280c4cd7d237d3",
                "MacAddress": "02:42:ac:15:00:02",
                "IPv4Address": "172.21.0.2/16",
                "IPv6Address": ""
            }
        },
        "Options": {},
        "Labels": {}
    }
]
docker run -p 8080:8080 --name spring-bits-backend --network spring-run spring-bits-backend

server.port=8080
spring.jpa.hibernate.ddl-auto=update
spring.datasource.url=jdbc:mysql://localhost:3306/spring
spring.datasource.username=shubham
spring.datasource.password=shubham
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver